#!/usr/bin/env ruby

require File.expand_path(File.dirname(__FILE__)) + '/lib/quiz.rb'
require 'getopt/long'

def usage
  STDERR.puts <<eos
Usage: #{$0} filename.rb renderer [options]
filename.rb contains questions expressed in the quiz DSL

renderer choices are:
  html5  - HTML 5 suitable for Web display/printing
  edxml  - XML for OpenEdX platform in-course questions
  xml    - [obsolete] Coursera HTML format for online auto-grading

The EdXML renderer supports these options:
  -n <name>, --name=<name>
      Only render the question(s) that have :name => 'name'.
  NOTE: Some markup that is legal in RuQL questions will break the EdX parser.
     Manually check your questions as you enter them into EdX.  Code seems to
     be particularly troublesome.
  NOTE: The 'points' and 'randomize' attributes of questions are not honored for
     EdX because the XML representation of those attributes isn't
     exposed by the EdX XML editor.

The HTML5 renderer supports these options:
  -c <href>, --css=<href>
      embed <href> for stylesheet into generated HTML5
  -t <file.html.erb>, --template=<file.html.erb>
      Use file.html.erb as HTML template rather than generating our own file.
      file.html.erb should have <%= yield %> where questions should go.
      The following local variables are available in the template:
        title - the quiz title
        num_questions - total number of questions
        total_points - total number of points 
  -s, --solutions
      generate solutions (showing correct answers and explanations)
  NOTE: If there is more than one quiz (collection of questions) in the file,
      a complete <html>...</html> block is produced in the output for EACH quiz.

eos
  exit
end

def main
  filename = ARGV.shift
  raise "Cannot read #{filename}" unless File.readable? filename
  renderer = ARGV.shift
  raise "Unknown renderer '#{renderer}'" unless Quiz.get_renderer(renderer)
  opts = Getopt::Long.getopts(
    ['-c', '--css', Getopt::REQUIRED],
    ['-t', '--template', Getopt::REQUIRED],
    ['-s', '--solutions', Getopt::BOOLEAN],
    ['-n', '--name', Getopt::REQUIRED],
    )
  Quiz.instance_eval "#{IO.read(filename)}"
  Quiz.quizzes.each { |quiz| puts quiz.render_with(renderer, opts)  }
end

usage if ARGV.length < 2
main

